version: '3'

services:
        zookeeper:
                image: wurstmeister/zookeeper
                container_name: zookeeper
                ports:
                        - 2181:2181
                networks:
                        - my_network

        kafka:
                image: wurstmeister/kafka
                container_name: kafka
                depends_on: 
                        - zookeeper
                ports:
                        - 9092:9092
                expose:
                        - 9093
                environment:
                        KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
                        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
                        KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
                        KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
                        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                        KAFKA_LOG_RETENTION_MS: 3000
                        KAFKA_CREATE_TOPICS: topictest:1:1
                volumes:
                        - /var/run/docker.sock:/var/run/docker.sock
                networks:
                        - my_network

        api:
                container_name: api
                build:
                        dockerfile: Dockerfile
                        context: ./api
                depends_on:
                        - mongo1
                ports:
                        - 8880:8880
                tty: true
                volumes:
                        - ./api/app:/app/
                working_dir: /app/
                command: python3 main.py
                restart: always
                networks: 
                        - my_network

        api2:
                container_name: api2
                build:
                        dockerfile: Dockerfile
                        context: ./api2
                depends_on:
                        - mysql-db
                ports:
                        - 80:80
                tty: true
                volumes:
                        - ./api2/app:/app/
                working_dir: /app/
                command: python3 main.py
                restart: always
                networks:
                        - my_network

        streaming-scraper:
                container_name: streaming-scraper
                build:
                        dockerfile: Dockerfile
                        context: ./streaming-scraper
                depends_on:
                        - kafka
                        - mongo1
                tty: true
                volumes:
                        - ./streaming-scraper/app:/app/
                working_dir: /app/
                command: python3 StreamingScraper.py
                restart: always
                networks: 
                        - my_network
        
        car-recognizer:
                container_name: car-recognizer
                build:
                        dockerfile: Dockerfile
                        context: car_recognizer
                depends_on:
                        - kafka
                volumes:
                        - ./car_recognizer/app:/app/
                tty: true
                working_dir: /app/
                command: python3 car_rec.py
                restart: always
                networks: 
                        - my_network

        prometheus:
                container_name: prometheus
                image: prom/prometheus:v2.1.0
                depends_on:
                        - api2
                command: --config.file=/etc/prometheus/prometheus.yaml
                volumes:
                        - ./prometheus:/etc/prometheus/
                tty: true
                restart: always
                ports:
                        - 9090:9090
                networks: 
                        - my_network

        mongo1:
                container_name: mongo1
                image: mongo:4.4.2-bionic
                environment: 
                        MONGO_INITDB_ROOT_USERNAME: root
                        MONGO_INITDB_ROOT_PASSWORD: pass
                        MONGO_INITDB_ROOT_DATABASE: root-db
                volumes:
                        - ./mongo/rs1/db:/data/db
                        - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
                networks:
                        - my_network
                ports:
                        - 27017:27017
                restart: always

        mysql-db:
                container_name: mysql-db
                image: mysql:5.7
                ports:
                        - "3306:3306"
                networks:
                        - my_network
                volumes:
                        - ./mysql-db/:/docker-entrypoint-initdb.d
                restart: always
                environment:
                        MYSQL_ROOT_PASSWORD: toor
                        MYSQL_DATABASE: users
                        MYSQL_USER: admin
                        MYSQL_PASSWORD: admin

networks:
        my_network:
                external: true
